<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var underlyingTypes =
	new []
	{
		Tuple.Create( "byte", typeof( byte ) ),
		Tuple.Create( "sbyte", typeof( sbyte ) ),
		Tuple.Create( "short", typeof( short ) ),
		Tuple.Create( "ushort", typeof( ushort ) ),
		Tuple.Create( "int", typeof( int ) ),
		Tuple.Create( "uint", typeof( uint ) ),
		Tuple.Create( "long", typeof( long ) ),
		Tuple.Create( "ulong", typeof( ulong ) ),
	};
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2014 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;

namespace MsgPack.Serialization
{
	public enum EnumDefault
	{
		None = 0,
		Foo = 1
	}

	[MessagePackEnum( SerializationMethod = EnumSerializationMethod.ByName )]
	public enum EnumByName
	{
		None = 0,
		Foo = 1
	}

	[MessagePackEnum( SerializationMethod = EnumSerializationMethod.ByUnderlyingValue )]
	public enum EnumByUnderlyingValue
	{
		None = 0,
		Foo = 1
	}

#pragma warning disable 3009
<#

foreach ( var underlyingType in underlyingTypes )
{
#>

	public enum Enum<#= underlyingType.Item2.Name #> : <#= underlyingType.Item1 #>
	{
		None = 0,
		Foo = 1
	}

	[Flags]
	public enum Enum<#= underlyingType.Item2.Name #>Flags : <#= underlyingType.Item1 #>
	{
		None = 0,
		Foo = 0x1,
		Bar = 0x2
	}
<#
}
#>
#pragma warning restore 3009

	public sealed class EnumMemberObject
	{
<#
foreach ( var enumType in new [] { "Default", "ByName", "ByUnderlyingValue" } )
{
	foreach ( var attribute in new [] { default( string ), "Default", "ByName", "ByUnderlyingValue" } )
	{
#>

<#
		if ( attribute != null )
		{
#>
		[MessagePackEnumMember( SerializationMethod = EnumMemberSerializationMethod.<#= attribute #> )]
<#
#>
		public Enum<#= enumType #> <#= enumType #><#= attribute ?? "NonAttribute" #>Property { get; set; }
<#
		}
	}
}
#>
	}

}